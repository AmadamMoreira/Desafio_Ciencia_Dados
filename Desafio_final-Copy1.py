{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b6349ec0-f8c4-413a-a28c-538ba1a54c29",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.pipeline import Pipeline\n",
    "from xgboost import XGBRegressor\n",
    "from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\n",
    "from collections import Counter\n",
    "import joblib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b97f19f3-552b-4ae5-86ac-8b8281885afb",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 48894 entries, 0 to 48893\n",
      "Data columns (total 16 columns):\n",
      " #   Column                         Non-Null Count  Dtype  \n",
      "---  ------                         --------------  -----  \n",
      " 0   id                             48894 non-null  int64  \n",
      " 1   nome                           48878 non-null  object \n",
      " 2   host_id                        48894 non-null  int64  \n",
      " 3   host_name                      48873 non-null  object \n",
      " 4   bairro_group                   48894 non-null  object \n",
      " 5   bairro                         48894 non-null  object \n",
      " 6   latitude                       48894 non-null  object \n",
      " 7   longitude                      48894 non-null  object \n",
      " 8   room_type                      48894 non-null  object \n",
      " 9   price                          48894 non-null  int64  \n",
      " 10  minimo_noites                  48894 non-null  int64  \n",
      " 11  numero_de_reviews              48894 non-null  int64  \n",
      " 12  ultima_review                  38842 non-null  object \n",
      " 13  reviews_por_mes                38842 non-null  float64\n",
      " 14  calculado_host_listings_count  48894 non-null  int64  \n",
      " 15  disponibilidade_365            48894 non-null  int64  \n",
      "dtypes: float64(1), int64(7), object(8)\n",
      "memory usage: 6.0+ MB\n",
      "     id                                              nome  host_id  \\\n",
      "0  2595                             Skylit Midtown Castle     2845   \n",
      "1  3647               THE VILLAGE OF HARLEM....NEW YORK !     4632   \n",
      "2  3831                   Cozy Entire Floor of Brownstone     4869   \n",
      "3  5022  Entire Apt: Spacious Studio/Loft by central park     7192   \n",
      "4  5099         Large Cozy 1 BR Apartment In Midtown East     7322   \n",
      "\n",
      "     host_name bairro_group        bairro   latitude   longitude  \\\n",
      "0     Jennifer    Manhattan       Midtown  4.075.362  -7.398.377   \n",
      "1    Elisabeth    Manhattan        Harlem  4.080.902    -739.419   \n",
      "2  LisaRoxanne     Brooklyn  Clinton Hill  4.068.514  -7.395.976   \n",
      "3        Laura    Manhattan   East Harlem  4.079.851  -7.394.399   \n",
      "4        Chris    Manhattan   Murray Hill  4.074.767     -73.975   \n",
      "\n",
      "         room_type  price  minimo_noites  numero_de_reviews ultima_review  \\\n",
      "0  Entire home/apt    225              1                 45    2019-05-21   \n",
      "1     Private room    150              3                  0           NaN   \n",
      "2  Entire home/apt     89              1                270    2019-07-05   \n",
      "3  Entire home/apt     80             10                  9    2018-11-19   \n",
      "4  Entire home/apt    200              3                 74    2019-06-22   \n",
      "\n",
      "   reviews_por_mes  calculado_host_listings_count  disponibilidade_365  \n",
      "0             0.38                              2                  355  \n",
      "1              NaN                              1                  365  \n",
      "2             4.64                              1                  194  \n",
      "3             0.10                              1                    0  \n",
      "4             0.59                              1                  129   None                  id       host_id         price  minimo_noites  \\\n",
      "count  4.889400e+04  4.889400e+04  48894.000000   48894.000000   \n",
      "mean   1.901753e+07  6.762139e+07    152.720763       7.030085   \n",
      "std    1.098288e+07  7.861118e+07    240.156625      20.510741   \n",
      "min    2.595000e+03  2.438000e+03      0.000000       1.000000   \n",
      "25%    9.472371e+06  7.822737e+06     69.000000       1.000000   \n",
      "50%    1.967743e+07  3.079553e+07    106.000000       3.000000   \n",
      "75%    2.915225e+07  1.074344e+08    175.000000       5.000000   \n",
      "max    3.648724e+07  2.743213e+08  10000.000000    1250.000000   \n",
      "\n",
      "       numero_de_reviews  reviews_por_mes  calculado_host_listings_count  \\\n",
      "count       48894.000000     38842.000000                   48894.000000   \n",
      "mean           23.274758         1.373251                       7.144005   \n",
      "std            44.550991         1.680453                      32.952855   \n",
      "min             0.000000         0.010000                       1.000000   \n",
      "25%             1.000000         0.190000                       1.000000   \n",
      "50%             5.000000         0.720000                       1.000000   \n",
      "75%            24.000000         2.020000                       2.000000   \n",
      "max           629.000000        58.500000                     327.000000   \n",
      "\n",
      "       disponibilidade_365  \n",
      "count         48894.000000  \n",
      "mean            112.776169  \n",
      "std             131.618692  \n",
      "min               0.000000  \n",
      "25%               0.000000  \n",
      "50%              45.000000  \n",
      "75%             227.000000  \n",
      "max             365.000000  \n"
     ]
    }
   ],
   "source": [
    "#Importação dos dados do dataset\n",
    "dados = pd.read_csv(r'C:\\Users\\amand\\Documents\\teste_indicium_precificacao.csv')\n",
    "\n",
    "# Visualização dos dados\n",
    "print(dados.head(), dados.info(), dados.describe())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a4a45de2-d390-4b3f-a8e2-3b3cc88b859c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Inicio do tratamento dos dados"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f5a7d0ff-d571-44f9-ac7c-9b667379fdf9",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Correção dos valores da coordenadas e transformação de str pra float\n",
    "\n",
    "def corrigir_coordenadas(valor):\n",
    "    \"\"\"\n",
    "    Função para corrigir valores de latitude e longitude removendo pontos separadores de milhar,\n",
    "    convertendo para float e ajustando para dezenas corretamente.\n",
    "    \"\"\"\n",
    "    if pd.isna(valor):\n",
    "        return None\n",
    "    \n",
    "    # Remover pontos separadores de milhar\n",
    "    valor_corrigido = str(valor).replace(\".\", \"\")\n",
    "    \n",
    "    # Converter para float\n",
    "    valor_float = float(valor_corrigido)\n",
    "    \n",
    "    # Ajustar escala apenas se o valor em módulo estiver fora do intervalo esperado\n",
    "    while abs(valor_float) > 180:  # Reduzir até o valor estar no intervalo válido\n",
    "        valor_float /= 10\n",
    "    while abs(valor_float) < 1:  # Aumentar até o valor estar no intervalo válido\n",
    "        valor_float *= 10\n",
    "    \n",
    "    return valor_float\n",
    "\n",
    "# Aplicar correção nas colunas de latitude e longitude\n",
    "dados[\"latitude\"] = dados[\"latitude\"].apply(corrigir_coordenadas)\n",
    "dados[\"longitude\"] = dados[\"longitude\"].apply(corrigir_coordenadas)\n",
    "\n",
    "# Salvar dataset corrigido\n",
    "dados.to_csv(\"teste_indicium_precificacao_corrigido.csv\", index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2a83aa8a-394b-4813-904d-e461b7f99fca",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   latitude  longitude\n",
      "0  40.75362  -73.98377\n",
      "1  40.80902  -73.94190\n",
      "2  40.68514  -73.95976\n",
      "3  40.79851  -73.94399\n",
      "4  40.74767  -73.97500\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 48894 entries, 0 to 48893\n",
      "Data columns (total 2 columns):\n",
      " #   Column     Non-Null Count  Dtype  \n",
      "---  ------     --------------  -----  \n",
      " 0   latitude   48894 non-null  float64\n",
      " 1   longitude  48894 non-null  float64\n",
      "dtypes: float64(2)\n",
      "memory usage: 764.1 KB\n",
      "None\n",
      "           latitude     longitude\n",
      "count  48894.000000  48894.000000\n",
      "mean      40.728951    -73.952169\n",
      "std        0.054529      0.046157\n",
      "min       40.499790    -74.244420\n",
      "25%       40.690100    -73.983070\n",
      "50%       40.723075    -73.955680\n",
      "75%       40.763117    -73.936273\n",
      "max       40.913060    -73.712990\n"
     ]
    }
   ],
   "source": [
    "print(dados[['latitude', 'longitude']].head()) \n",
    "print(dados[['latitude', 'longitude']].info())\n",
    "print(dados[['latitude', 'longitude']].describe())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5d2f0ffb-128f-44c3-9b32-f8c373d484fa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "id                                   0\n",
      "nome                                16\n",
      "host_id                              0\n",
      "host_name                           21\n",
      "bairro_group                         0\n",
      "bairro                               0\n",
      "latitude                             0\n",
      "longitude                            0\n",
      "room_type                            0\n",
      "price                                0\n",
      "minimo_noites                        0\n",
      "numero_de_reviews                    0\n",
      "ultima_review                    10052\n",
      "reviews_por_mes                  10052\n",
      "calculado_host_listings_count        0\n",
      "disponibilidade_365                  0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "#Identificando dados nulos\n",
    "print(dados.isnull().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b641964d-45b1-46a2-8f98-7c854342f27d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n"
     ]
    }
   ],
   "source": [
    "#Identificando duplicatas\n",
    "print(dados.duplicated().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ddabc401-edef-49db-902e-10f5c62a278d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Remover outliers extremos de preço para melhor visualização\n",
    "dados = dados[dados[\"price\"] < dados[\"price\"].quantile(0.99)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "2726019c-bf6b-4154-ab8a-9e551e9fa1fb",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Iniciando análise exploratória"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "47dd41fa-7310-4f08-9a8c-4cbd9f566918",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Selecionar variáveis para o modelo\n",
    "variaveis_numericas = ['id', 'host_id','minimo_noites', 'numero_de_reviews', 'reviews_por_mes', \n",
    "                        'calculado_host_listings_count', 'disponibilidade_365', \n",
    "                        'latitude', 'longitude']\n",
    "\n",
    "variaveis_categoricas = ['nome','host_name','bairro_group', 'bairro', 'room_type']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "2b8c4b75-0cee-4d47-b730-7ed95b8b0d35",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "bairro_group\n",
      "Manhattan        21295\n",
      "Brooklyn         20000\n",
      "Queens            5650\n",
      "Bronx             1088\n",
      "Staten Island      369\n",
      "Name: count, dtype: int64\n",
      "bairro\n",
      "Williamsburg          3905\n",
      "Bedford-Stuyvesant    3698\n",
      "Harlem                2644\n",
      "Bushwick              2461\n",
      "Hell's Kitchen        1935\n",
      "                      ... \n",
      "Woodrow                  1\n",
      "Richmondtown             1\n",
      "New Dorp                 1\n",
      "Rossville                1\n",
      "Willowbrook              1\n",
      "Name: count, Length: 220, dtype: int64\n",
      "room_type\n",
      "Entire home/apt    25013\n",
      "Private room       22236\n",
      "Shared room         1153\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "#Variáveis Categóricas\n",
    "print(dados['bairro_group'].value_counts())\n",
    "print(dados['bairro'].value_counts())\n",
    "print(dados['room_type'].value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "8a353d2e-ac68-4198-8d26-0f3fdf2f2de2",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#gráficos das váriaveis categóricas\n",
    "sns.countplot(x='bairro_group', data=dados)\n",
    "plt.show()\n",
    "sns.countplot(x='room_type', data=dados)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "acf05c52-c318-4673-9755-d3648cd84919",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Entrega 2a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "f353fef6-f6cd-4f6d-b5f9-122937b09436",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                 bairro  preco_medio  disponibilidade_media  \\\n",
      "218             Woodrow   700.000000               0.000000   \n",
      "196             Tribeca   292.400000             119.632258   \n",
      "143                NoHo   276.246753             101.636364   \n",
      "138            Neponsit   274.666667             231.000000   \n",
      "75    Flatiron District   258.162162             117.175676   \n",
      "126             Midtown   252.113195             154.967180   \n",
      "214         Willowbrook   249.000000             351.000000   \n",
      "177                SoHo   228.139881             103.258929   \n",
      "208        West Village   224.897019              81.033875   \n",
      "73   Financial District   215.745257             192.331978   \n",
      "\n",
      "     quantidade_listings  \n",
      "218                    1  \n",
      "196                  155  \n",
      "143                   77  \n",
      "138                    3  \n",
      "75                    74  \n",
      "126                 1493  \n",
      "214                    1  \n",
      "177                  336  \n",
      "208                  738  \n",
      "73                   738  \n"
     ]
    }
   ],
   "source": [
    "# Agrupar os dados por bairro e calcular a média de preço\n",
    "bairro_stats = dados.groupby('bairro').agg(\n",
    "    preco_medio=('price', 'mean'),\n",
    "    disponibilidade_media=('disponibilidade_365', 'mean'),\n",
    "    quantidade_listings=('id', 'count')  # Número de propriedades no bairro\n",
    ").reset_index()\n",
    "\n",
    "# Ordenar pelo preço médio do bairro (do maior para o menor)\n",
    "bairro_stats = bairro_stats.sort_values(by='preco_medio', ascending=False)\n",
    "\n",
    "# Exibir os 10 melhores bairros para investir\n",
    "print(bairro_stats.head(10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "e1e04b9d-63c3-49e0-bdb0-f9599ef44c84",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Entrega 2b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "f3b3c6a4-b8fd-4630-a9e8-2c4f1e612171",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                        price  minimo_noites  disponibilidade_365\n",
      "price                1.000000       0.024863              0.11031\n",
      "minimo_noites        0.024863       1.000000              0.14456\n",
      "disponibilidade_365  0.110310       0.144560              1.00000\n"
     ]
    }
   ],
   "source": [
    "# Calcular correlação entre as variáveis\n",
    "correlacoes = dados[['price', 'minimo_noites', 'disponibilidade_365']].corr()\n",
    "print(correlacoes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "d511194c-a603-4a4a-ac45-229b43f1ddef",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Criar um mapa de calor\n",
    "plt.figure(figsize=(6, 4))\n",
    "sns.heatmap(correlacoes, annot=True, cmap='coolwarm', fmt=\".2f\", linewidths=0.5, vmin=-1, vmax=1)\n",
    "plt.title('Mapa de Correlação entre Variáveis')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "e67e0ff0-7fd7-45be-912d-8bb2ecbb54d6",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Criar uma cópia do DataFrame para evitar modificar o original\n",
    "dados_filtered = dados.copy()\n",
    "\n",
    "# Criar faixas para as variáveis numéricas\n",
    "dados_filtered['min_noites_bins'] = pd.cut(dados_filtered['minimo_noites'], bins=[1, 2, 3, 7, 15, 30, 60, 365], \n",
    "                                        labels=['1', '2', '3-6', '7-14', '15-29', '30-59', '60+'])\n",
    "\n",
    "dados_filtered['disponibilidade_bins'] = pd.cut(dados_filtered['disponibilidade_365'], bins=[0, 50, 150, 250, 365], \n",
    "                                             labels=['0-50', '51-150', '151-250', '251-365'])\n",
    "\n",
    "# Agrupar por faixas e calcular média de preço\n",
    "price_by_min_nights = dados_filtered.groupby('min_noites_bins', observed=True)['price'].mean()\n",
    "price_by_availability = dados_filtered.groupby('disponibilidade_bins', observed=True)['price'].mean()\n",
    "\n",
    "# Criar gráfico de linha\n",
    "plt.figure(figsize=(12, 5))\n",
    "\n",
    "# Gráfico 1: Preço médio por mínimo de noites\n",
    "plt.subplot(1, 2, 1)\n",
    "sns.lineplot(x=price_by_min_nights.index, y=price_by_min_nights.values, marker='o', color='b')\n",
    "plt.xlabel('Faixa de Mínimo de Noites')\n",
    "plt.ylabel('Preço Médio')\n",
    "plt.title('Preço Médio por Mínimo de Noites')\n",
    "\n",
    "# Gráfico 2: Preço médio por disponibilidade\n",
    "plt.subplot(1, 2, 2)\n",
    "sns.lineplot(x=price_by_availability.index, y=price_by_availability.values, marker='o', color='r')\n",
    "plt.xlabel('Faixa de Disponibilidade')\n",
    "plt.ylabel('Preço Médio')\n",
    "plt.title('Preço Médio por Disponibilidade')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a83c36f4-efeb-40bf-a070-1f3f174b81e8",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Entrega 2c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "24d0a6e7-9e9f-46f3-88aa-89927a5ff234",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "137.29769431015248\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\amand\\AppData\\Local\\Temp\\ipykernel_77368\\1935461766.py:22: FutureWarning: \n",
      "\n",
      "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `y` variable to `hue` and set `legend=False` for the same effect.\n",
      "\n",
      "  sns.barplot(y=dados_palavras['Palavra'], x=dados_palavras['Frequência'], palette='Reds_r')\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Calcular o preço médio\n",
    "preco_medio = dados['price'].mean()\n",
    "\n",
    "print(preco_medio)\n",
    "\n",
    "# Filtrar locais com preço acima da média\n",
    "dados_acima_media = dados[dados['price'] > preco_medio]\n",
    "\n",
    "# Concatenar todos os nomes dos imóveis mais caros em um único texto\n",
    "texto_nomes = \" \".join(dados_acima_media['nome'].dropna())\n",
    "\n",
    "# Contar a frequência das palavras\n",
    "palavras = texto_nomes.split()\n",
    "contagem_palavras = Counter(palavras)\n",
    "\n",
    "# Criar um DataFrame com as palavras mais frequentes\n",
    "dados_palavras = pd.DataFrame(contagem_palavras.items(), columns=['Palavra', 'Frequência'])\n",
    "dados_palavras = dados_palavras.sort_values(by='Frequência', ascending=False).head(20)  # Top 15 palavras\n",
    "\n",
    "# Criar um gráfico de barras das palavras mais comuns\n",
    "plt.figure(figsize=(12, 6))\n",
    "sns.barplot(y=dados_palavras['Palavra'], x=dados_palavras['Frequência'], palette='Reds_r')\n",
    "plt.xlabel(\"Frequência\")\n",
    "plt.ylabel(\"Palavra\")\n",
    "plt.title(\"Palavras mais comuns nos nomes de imóveis mais caros\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "23dbfcf9-cd2b-45ad-bdc0-ff3d0f47ce88",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Entrega 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "61a71713-e8cd-43f4-b3f4-674e1f94d83f",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#Separar variáveis explicativas e variável alvo (preço)\n",
    "X = dados[variaveis_numericas + variaveis_categoricas]\n",
    "y = dados['price']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "3ab8c4d0-8345-4b5e-9dd5-4a098a0c8392",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Criar transformações para variáveis categóricas e numéricas\n",
    "preprocessador = ColumnTransformer([\n",
    "    ('num', StandardScaler(), variaveis_numericas),\n",
    "    ('cat', OneHotEncoder(handle_unknown='ignore'), variaveis_categoricas)\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "b579a477-149e-49db-b525-c56062d1c9bd",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pipeline(steps=[('preprocessador',\n",
      "                 ColumnTransformer(transformers=[('num', StandardScaler(),\n",
      "                                                  ['id', 'host_id',\n",
      "                                                   'minimo_noites',\n",
      "                                                   'numero_de_reviews',\n",
      "                                                   'reviews_por_mes',\n",
      "                                                   'calculado_host_listings_count',\n",
      "                                                   'disponibilidade_365',\n",
      "                                                   'latitude', 'longitude']),\n",
      "                                                 ('cat',\n",
      "                                                  OneHotEncoder(handle_unknown='ignore'),\n",
      "                                                  ['nome', 'host_name',\n",
      "                                                   'bairro_group', 'bairro',\n",
      "                                                   'room_type'])])),\n",
      "                ('re...\n",
      "                              feature_types=None, gamma=None, grow_policy=None,\n",
      "                              importance_type=None,\n",
      "                              interaction_constraints=None, learning_rate=0.2,\n",
      "                              max_bin=None, max_cat_threshold=None,\n",
      "                              max_cat_to_onehot=None, max_delta_step=None,\n",
      "                              max_depth=None, max_leaves=None,\n",
      "                              min_child_weight=None, missing=nan,\n",
      "                              monotone_constraints=None, multi_strategy=None,\n",
      "                              n_estimators=100, n_jobs=None,\n",
      "                              num_parallel_tree=None, random_state=42, ...))])\n"
     ]
    }
   ],
   "source": [
    "#Criar o pipeline do modelo XGBoost\n",
    "modelo = Pipeline([\n",
    "    ('preprocessador', preprocessador),\n",
    "    ('regressor', XGBRegressor(n_estimators=100, learning_rate=0.2, random_state=42))\n",
    "])\n",
    "print(modelo)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "68616762-d866-40ec-bed4-620fed243c37",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Separar dados em treino e teste\n",
    "X_treino, X_teste, y_treino, y_teste = train_test_split(X, y, test_size=0.3, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "970cadb5-ae4b-4e6a-a9f2-11e83868f4ea",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-1 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-1 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-1 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-1 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-1 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;preprocessador&#x27;,\n",
       "                 ColumnTransformer(transformers=[(&#x27;num&#x27;, StandardScaler(),\n",
       "                                                  [&#x27;id&#x27;, &#x27;host_id&#x27;,\n",
       "                                                   &#x27;minimo_noites&#x27;,\n",
       "                                                   &#x27;numero_de_reviews&#x27;,\n",
       "                                                   &#x27;reviews_por_mes&#x27;,\n",
       "                                                   &#x27;calculado_host_listings_count&#x27;,\n",
       "                                                   &#x27;disponibilidade_365&#x27;,\n",
       "                                                   &#x27;latitude&#x27;, &#x27;longitude&#x27;]),\n",
       "                                                 (&#x27;cat&#x27;,\n",
       "                                                  OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),\n",
       "                                                  [&#x27;nome&#x27;, &#x27;host_name&#x27;,\n",
       "                                                   &#x27;bairro_group&#x27;, &#x27;bairro&#x27;,\n",
       "                                                   &#x27;room_type&#x27;])])),\n",
       "                (&#x27;re...\n",
       "                              feature_types=None, gamma=None, grow_policy=None,\n",
       "                              importance_type=None,\n",
       "                              interaction_constraints=None, learning_rate=0.2,\n",
       "                              max_bin=None, max_cat_threshold=None,\n",
       "                              max_cat_to_onehot=None, max_delta_step=None,\n",
       "                              max_depth=None, max_leaves=None,\n",
       "                              min_child_weight=None, missing=nan,\n",
       "                              monotone_constraints=None, multi_strategy=None,\n",
       "                              n_estimators=100, n_jobs=None,\n",
       "                              num_parallel_tree=None, random_state=42, ...))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;Pipeline<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.pipeline.Pipeline.html\">?<span>Documentation for Pipeline</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>Pipeline(steps=[(&#x27;preprocessador&#x27;,\n",
       "                 ColumnTransformer(transformers=[(&#x27;num&#x27;, StandardScaler(),\n",
       "                                                  [&#x27;id&#x27;, &#x27;host_id&#x27;,\n",
       "                                                   &#x27;minimo_noites&#x27;,\n",
       "                                                   &#x27;numero_de_reviews&#x27;,\n",
       "                                                   &#x27;reviews_por_mes&#x27;,\n",
       "                                                   &#x27;calculado_host_listings_count&#x27;,\n",
       "                                                   &#x27;disponibilidade_365&#x27;,\n",
       "                                                   &#x27;latitude&#x27;, &#x27;longitude&#x27;]),\n",
       "                                                 (&#x27;cat&#x27;,\n",
       "                                                  OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),\n",
       "                                                  [&#x27;nome&#x27;, &#x27;host_name&#x27;,\n",
       "                                                   &#x27;bairro_group&#x27;, &#x27;bairro&#x27;,\n",
       "                                                   &#x27;room_type&#x27;])])),\n",
       "                (&#x27;re...\n",
       "                              feature_types=None, gamma=None, grow_policy=None,\n",
       "                              importance_type=None,\n",
       "                              interaction_constraints=None, learning_rate=0.2,\n",
       "                              max_bin=None, max_cat_threshold=None,\n",
       "                              max_cat_to_onehot=None, max_delta_step=None,\n",
       "                              max_depth=None, max_leaves=None,\n",
       "                              min_child_weight=None, missing=nan,\n",
       "                              monotone_constraints=None, multi_strategy=None,\n",
       "                              n_estimators=100, n_jobs=None,\n",
       "                              num_parallel_tree=None, random_state=42, ...))])</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;preprocessador: ColumnTransformer<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.compose.ColumnTransformer.html\">?<span>Documentation for preprocessador: ColumnTransformer</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>ColumnTransformer(transformers=[(&#x27;num&#x27;, StandardScaler(),\n",
       "                                 [&#x27;id&#x27;, &#x27;host_id&#x27;, &#x27;minimo_noites&#x27;,\n",
       "                                  &#x27;numero_de_reviews&#x27;, &#x27;reviews_por_mes&#x27;,\n",
       "                                  &#x27;calculado_host_listings_count&#x27;,\n",
       "                                  &#x27;disponibilidade_365&#x27;, &#x27;latitude&#x27;,\n",
       "                                  &#x27;longitude&#x27;]),\n",
       "                                (&#x27;cat&#x27;, OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),\n",
       "                                 [&#x27;nome&#x27;, &#x27;host_name&#x27;, &#x27;bairro_group&#x27;, &#x27;bairro&#x27;,\n",
       "                                  &#x27;room_type&#x27;])])</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">num</label><div class=\"sk-toggleable__content fitted\"><pre>[&#x27;id&#x27;, &#x27;host_id&#x27;, &#x27;minimo_noites&#x27;, &#x27;numero_de_reviews&#x27;, &#x27;reviews_por_mes&#x27;, &#x27;calculado_host_listings_count&#x27;, &#x27;disponibilidade_365&#x27;, &#x27;latitude&#x27;, &#x27;longitude&#x27;]</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;StandardScaler<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.preprocessing.StandardScaler.html\">?<span>Documentation for StandardScaler</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>StandardScaler()</pre></div> </div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">cat</label><div class=\"sk-toggleable__content fitted\"><pre>[&#x27;nome&#x27;, &#x27;host_name&#x27;, &#x27;bairro_group&#x27;, &#x27;bairro&#x27;, &#x27;room_type&#x27;]</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;OneHotEncoder<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.preprocessing.OneHotEncoder.html\">?<span>Documentation for OneHotEncoder</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div> </div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">XGBRegressor</label><div class=\"sk-toggleable__content fitted\"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,\n",
       "             colsample_bylevel=None, colsample_bynode=None,\n",
       "             colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
       "             enable_categorical=False, eval_metric=None, feature_types=None,\n",
       "             gamma=None, grow_policy=None, importance_type=None,\n",
       "             interaction_constraints=None, learning_rate=0.2, max_bin=None,\n",
       "             max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "             max_delta_step=None, max_depth=None, max_leaves=None,\n",
       "             min_child_weight=None, missing=nan, monotone_constraints=None,\n",
       "             multi_strategy=None, n_estimators=100, n_jobs=None,\n",
       "             num_parallel_tree=None, random_state=42, ...)</pre></div> </div></div></div></div></div></div>"
      ],
      "text/plain": [
       "Pipeline(steps=[('preprocessador',\n",
       "                 ColumnTransformer(transformers=[('num', StandardScaler(),\n",
       "                                                  ['id', 'host_id',\n",
       "                                                   'minimo_noites',\n",
       "                                                   'numero_de_reviews',\n",
       "                                                   'reviews_por_mes',\n",
       "                                                   'calculado_host_listings_count',\n",
       "                                                   'disponibilidade_365',\n",
       "                                                   'latitude', 'longitude']),\n",
       "                                                 ('cat',\n",
       "                                                  OneHotEncoder(handle_unknown='ignore'),\n",
       "                                                  ['nome', 'host_name',\n",
       "                                                   'bairro_group', 'bairro',\n",
       "                                                   'room_type'])])),\n",
       "                ('re...\n",
       "                              feature_types=None, gamma=None, grow_policy=None,\n",
       "                              importance_type=None,\n",
       "                              interaction_constraints=None, learning_rate=0.2,\n",
       "                              max_bin=None, max_cat_threshold=None,\n",
       "                              max_cat_to_onehot=None, max_delta_step=None,\n",
       "                              max_depth=None, max_leaves=None,\n",
       "                              min_child_weight=None, missing=nan,\n",
       "                              monotone_constraints=None, multi_strategy=None,\n",
       "                              n_estimators=100, n_jobs=None,\n",
       "                              num_parallel_tree=None, random_state=42, ...))])"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Treinar o modelo\n",
    "modelo.fit(X_treino, y_treino)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "a47e1c79-4bb3-4b16-8c62-1bed53392b86",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Fazer previsões\n",
    "y_pred = modelo.predict(X_teste)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "dc6697bc-6fec-4ba9-a62a-2b50ca287f12",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "📌 RMSE: 73.28\n",
      "📌 R²: 0.50\n",
      "📌 MAE: 44.76\n"
     ]
    }
   ],
   "source": [
    "# 🔹 Avaliar o modelo\n",
    "rmse = np.sqrt(mean_squared_error(y_teste, y_pred))\n",
    "r2 = r2_score(y_teste, y_pred)\n",
    "mae = mean_absolute_error(y_teste, y_pred)\n",
    "\n",
    "print(f\"📌 RMSE: {rmse:.2f}\")\n",
    "print(f\"📌 R²: {r2:.2f}\")\n",
    "print(f\"📌 MAE: {mae:.2f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "e1b738db-63b0-446a-8e51-28ea8fb388c7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Preço estimado: $258.84\n"
     ]
    }
   ],
   "source": [
    "# Criar DataFrame com os dados do apartamento\n",
    "novo_apartamento = pd.DataFrame([{\n",
    "    'id': 2595,\n",
    " 'nome': 'Skylit Midtown Castle',\n",
    " 'host_id': 2845,\n",
    " 'host_name': 'Jennifer',\n",
    " 'bairro_group': 'Manhattan',\n",
    " 'bairro': 'Midtown',\n",
    " 'latitude': 40.75362,\n",
    " 'longitude': -73.98377,\n",
    " 'room_type': 'Entire home/apt',\n",
    " 'minimo_noites': 1,\n",
    " 'numero_de_reviews': 45,\n",
    " 'ultima_review': '2019-05-21',\n",
    " 'reviews_por_mes': 0.38,\n",
    " 'calculado_host_listings_count': 2,\n",
    " 'disponibilidade_365': 355\n",
    "}])\n",
    "\n",
    "# Aplicar a transformação do pipeline e prever o preço\n",
    "preco_estimado = modelo.predict(novo_apartamento)\n",
    "print(f'Preço estimado: ${preco_estimado[0]:.2f}')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "b6f643dd-d77a-481d-aef4-028588463db1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Modelo salvo com sucesso usando joblib!\n"
     ]
    }
   ],
   "source": [
    "import joblib\n",
    "\n",
    "# Salvar o modelo usando joblib\n",
    "joblib.dump(modelo, \"modelo_xgboost.pkl\")\n",
    "\n",
    "print(\"Modelo salvo com sucesso usando joblib!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6fc68c6b-1c0c-44e0-89ed-89632c47ee0f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
